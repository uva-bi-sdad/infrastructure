grant_db_permissions("oss", "ci3uz", schema = "universe")
grant_db_permissions("oss", "ent4pn", schema = "universe")
create_db_user <- function(new_username, db_user = Sys.getenv("db_userid"), db_pass = Sys.getenv("db_pwd"), db_host = "postgis_1", db_port = "5432", db_user_database = Sys.getenv("db_userid")) {
con <- DBI::dbConnect(drv = RPostgreSQL::PostgreSQL(),
dbname = db_user_database,
host = db_host,
port = db_port,
user = db_user,
password = db_pass)
u <- DBI::dbGetQuery(con, paste0("SELECT 1 FROM pg_catalog.pg_roles WHERE rolname = '", new_username,"'"))
if (nrow(u) == 0) {
e <- DBI::dbExecute(con, paste0("CREATE USER ", new_username," WITH PASSWORD '", new_username, "'"))
if (e == 0) print(paste("Created User", new_username))
} else {
print(paste("User", new_username, "Already Exists"))
}
d <- DBI::dbGetQuery(con, paste0("SELECT 1 FROM pg_database WHERE datname = '", new_username,"'"))
if (nrow(d) == 0) {
e <- DBI::dbExecute(con, paste0("CREATE DATABASE ", new_username))
if (e == 0) print(paste("Created Database", new_username))
} else {
print(paste("Database", new_username, "Already Exists"))
}
DBI::dbExecute(con, paste0("GRANT ALL ON DATABASE ", new_username," TO ", new_username))
print(paste0("GRANT ALL ON DATABASE ", new_username," TO ", new_username))
con2 <- DBI::dbConnect(drv = RPostgreSQL::PostgreSQL(),
dbname = new_username,
host = db_host,
port = db_port,
user = db_user,
password = db_pass)
DBI::dbExecute(con2, paste0("GRANT ALL ON ALL TABLES IN SCHEMA public TO ", new_username))
print(paste0("GRANT ALL ON ALL TABLES IN SCHEMA public TO ", new_username))
DBI::dbExecute(con2, paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO ", new_username))
print(paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO ", new_username))
DBI::dbExecute(con2, paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO ", new_username))
print(paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO ", new_username))
DBI::dbDisconnect(con)
DBI::dbDisconnect(con2)
}
create_db_user("gk8yj")
grant_db_permissions <- function(grant_database, grant_username, schema = "public", db_user = Sys.getenv("db_userid"), db_pass = Sys.getenv("db_pwd"), db_host = "postgis_1", db_port = "5432") {
con <- DBI::dbConnect(drv = RPostgreSQL::PostgreSQL(),
dbname = grant_database,
host = db_host,
port = db_port,
user = db_user,
password = db_pass)
DBI::dbExecute(con, paste0("GRANT ALL ON DATABASE ", grant_database," TO ", grant_username))
print(paste0("GRANT ALL ON DATABASE ", grant_database," TO ", grant_username))
DBI::dbExecute(con, paste0("GRANT ALL ON SCHEMA ", schema," TO ", grant_username))
print(paste0("GRANT ALL ON SCHEMA ", schema," TO ", grant_username))
DBI::dbExecute(con, paste0("GRANT ALL ON ALL TABLES IN SCHEMA ", schema," TO ", grant_username))
print(paste0("GRANT ALL ON ALL TABLES IN SCHEMA ", schema," TO ", grant_username))
DBI::dbExecute(con, paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON TABLES TO ", grant_username))
print(paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON TABLES TO ", grant_username))
DBI::dbExecute(con, paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON SEQUENCES TO ", grant_username))
print(paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON SEQUENCES TO ", grant_username))
DBI::dbDisconnect(con)
}
grant_db_permissions("oss", "gk8yj")
grant_db_permissions("oss", "gk8yj", schema = "universe")
grant_db_permissions("acpd", "gk8yj")
grant_db_permissions("gis", "gk8yj")
grant_db_permissions("gis", "gk8yj", schema = "census_cb")
grant_db_permissions("gis", "gk8yj", schema = "census_tl")
grant_db_permissions <- function(grant_database, grant_username, schema = "public", db_user = Sys.getenv("db_userid"), db_pass = Sys.getenv("db_pwd"), db_host = "postgis_1", db_port = "5432") {
con <- DBI::dbConnect(drv = RPostgreSQL::PostgreSQL(),
dbname = grant_database,
host = db_host,
port = db_port,
user = db_user,
password = db_pass)
DBI::dbExecute(con, paste0("GRANT ALL ON DATABASE ", grant_database," TO ", grant_username))
print(paste0("GRANT ALL ON DATABASE ", grant_database," TO ", grant_username))
DBI::dbExecute(con, paste0("GRANT ALL ON SCHEMA ", schema," TO ", grant_username))
print(paste0("GRANT ALL ON SCHEMA ", schema," TO ", grant_username))
DBI::dbExecute(con, paste0("GRANT ALL ON ALL TABLES IN SCHEMA ", schema," TO ", grant_username))
print(paste0("GRANT ALL ON ALL TABLES IN SCHEMA ", schema," TO ", grant_username))
DBI::dbExecute(con, paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON TABLES TO ", grant_username))
print(paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON TABLES TO ", grant_username))
DBI::dbExecute(con, paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON SEQUENCES TO ", grant_username))
print(paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON SEQUENCES TO ", grant_username))
DBI::dbDisconnect(con)
}
grant_db_permissions <- function(grant_database, grant_username, schema = "public", db_user = Sys.getenv("db_userid"), db_pass = Sys.getenv("db_pwd"), db_host = "postgis_1", db_port = "5432") {
con <- DBI::dbConnect(drv = RPostgreSQL::PostgreSQL(),
dbname = grant_database,
host = db_host,
port = db_port,
user = db_user,
password = db_pass)
DBI::dbExecute(con, paste0("GRANT ALL ON DATABASE ", grant_database," TO ", grant_username))
print(paste0("GRANT ALL ON DATABASE ", grant_database," TO ", grant_username))
DBI::dbExecute(con, paste0("GRANT ALL ON SCHEMA ", schema," TO ", grant_username))
print(paste0("GRANT ALL ON SCHEMA ", schema," TO ", grant_username))
DBI::dbExecute(con, paste0("GRANT ALL ON ALL TABLES IN SCHEMA ", schema," TO ", grant_username))
print(paste0("GRANT ALL ON ALL TABLES IN SCHEMA ", schema," TO ", grant_username))
DBI::dbExecute(con, paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON TABLES TO ", grant_username))
print(paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON TABLES TO ", grant_username))
DBI::dbExecute(con, paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON SEQUENCES TO ", grant_username))
print(paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON SEQUENCES TO ", grant_username))
DBI::dbDisconnect(con)
}
grant_db_permissions("oss", "kb7hp", schema = "universe")
grant_db_permissions <- function(grant_database, grant_username, schema = "public", db_user = Sys.getenv("db_userid"), db_pass = Sys.getenv("db_pwd"), db_host = "postgis_1", db_port = "5432") {
con <- DBI::dbConnect(drv = RPostgreSQL::PostgreSQL(),
dbname = grant_database,
host = db_host,
port = db_port,
user = db_user,
password = db_pass)
DBI::dbExecute(con, paste0("GRANT ALL ON DATABASE ", grant_database," TO ", grant_username))
print(paste0("GRANT ALL ON DATABASE ", grant_database," TO ", grant_username))
DBI::dbExecute(con, paste0("GRANT ALL ON SCHEMA ", schema," TO ", grant_username))
print(paste0("GRANT ALL ON SCHEMA ", schema," TO ", grant_username))
DBI::dbExecute(con, paste0("GRANT ALL ON ALL TABLES IN SCHEMA ", schema," TO ", grant_username))
print(paste0("GRANT ALL ON ALL TABLES IN SCHEMA ", schema," TO ", grant_username))
DBI::dbExecute(con, paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON TABLES TO ", grant_username))
print(paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON TABLES TO ", grant_username))
DBI::dbExecute(con, paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON SEQUENCES TO ", grant_username))
print(paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON SEQUENCES TO ", grant_username))
DBI::dbDisconnect(con)
}
grant_db_permissions("oss", "ent4pn", schema = "universe")
grant_db_permissions <- function(grant_database, grant_username, schema = "public", db_user = Sys.getenv("db_userid"), db_pass = Sys.getenv("db_pwd"), db_host = "postgis_1", db_port = "5432") {
con <- DBI::dbConnect(drv = RPostgreSQL::PostgreSQL(),
dbname = grant_database,
host = db_host,
port = db_port,
user = db_user,
password = db_pass)
DBI::dbExecute(con, paste0("GRANT ALL ON DATABASE ", grant_database," TO ", grant_username))
print(paste0("GRANT ALL ON DATABASE ", grant_database," TO ", grant_username))
DBI::dbExecute(con, paste0("GRANT ALL ON SCHEMA ", schema," TO ", grant_username))
print(paste0("GRANT ALL ON SCHEMA ", schema," TO ", grant_username))
DBI::dbExecute(con, paste0("GRANT ALL ON ALL TABLES IN SCHEMA ", schema," TO ", grant_username))
print(paste0("GRANT ALL ON ALL TABLES IN SCHEMA ", schema," TO ", grant_username))
DBI::dbExecute(con, paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON TABLES TO ", grant_username))
print(paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON TABLES TO ", grant_username))
DBI::dbExecute(con, paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON SEQUENCES TO ", grant_username))
print(paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON SEQUENCES TO ", grant_username))
DBI::dbDisconnect(con)
}
grant_db_permissions("gis", "bband_user", schema = "census_cb")
grant_db_permissions("gis", "bband_user", schema = "census_tl")
library(readxl)
users <- read_excel("users/users.xlsx")
View(users)
readr::write_csv(users, "users/users.csv")
rm(users)
readr::read_csv("users/users.csv")
users <- readr::read_csv("users/users.csv")
View(users)
users[1]
for (u in users) print(names())
for (u in users) print(name)
for (u in users) print(u.name)
for (u in users) print(u$name)
for (u in users) u
users[1,]
users[1,]$name
users <- data.table::fread("users/users.csv")
i=1
users[i]$name
for (i in 1:nrow(users)) {
paste0(
"|[[",
users[i]$name,
">>http://sdad.policy-analytics.net:",
users[i]$rstudio_port,
"||rel=\"noopener noreferrer\" target=\"_blank\"]]",
"|[[PostGIS>>http://sdad.policy-analytics.net:8080??pgsql=postgis_1||rel=\"noopener noreferrer\" target=\"_blank\"]]"
)
}
for (i in 1:nrow(users)) {
print(paste0(
"|[[",
users[i]$name,
">>http://sdad.policy-analytics.net:",
users[i]$rstudio_port,
"||rel=\"noopener noreferrer\" target=\"_blank\"]]",
"|[[PostGIS>>http://sdad.policy-analytics.net:8080??pgsql=postgis_1||rel=\"noopener noreferrer\" target=\"_blank\"]]"
))
}
for (i in 1:nrow(users)) {
print(paste0(
"|[[",
users[i]$name,
">>http://sdad.policy-analytics.net:",
users[i]$rstudio_port,
"||rel=\"noopener noreferrer\" target=\"_blank\"]]",
"|[[PostGIS>>http://sdad.policy-analytics.net:8080??pgsql=postgis_1||rel=\"noopener noreferrer\" target=\"_blank\"]]"
), row.names = FALSE)
}
l <- vector("list", nrow(users))
users <- data.table::fread("users/users.csv")
l <- vector("list", nrow(users))
for (i in 1:nrow(users)) {
u <- paste0(
"|[[",
users[i]$name,
">>http://sdad.policy-analytics.net:",
users[i]$rstudio_port,
"||rel=\"noopener noreferrer\" target=\"_blank\"]]",
"|[[PostGIS>>http://sdad.policy-analytics.net:8080??pgsql=postgis_1||rel=\"noopener noreferrer\" target=\"_blank\"]]"
)
l[i] <- u
}
View(l)
writeLines(l, "users/rstudio_users.txt")
l_dt <- data.table::rbindlist(l)
unlist(l)
writeLines(unlist(l), "users/rstudio_users.txt")
View(users)
users <- data.table::fread("users/users.csv")[!is.na(rstudio_port)]
l <- vector("list", nrow(users))
for (i in 1:nrow(users)) {
u <- paste0(
"|[[",
users[i]$name,
">>http://sdad.policy-analytics.net:",
users[i]$rstudio_port,
"||rel=\"noopener noreferrer\" target=\"_blank\"]]"
)
l[i] <- u
}
writeLines(unlist(l), "users/rstudio_users.txt")
seq(e:z)
letters
letters[5:]
letters[5:26]
for (l in letters[5:26]) {
#sql <-
paste0("COPY commits from '/mnt/volume_nyc1_02/mysql-2019-01-01/commits_ascii_a", l,"' WITH (FORMAT 'csv', QUOTE E'\"', ESCAPE '\', NULL '\N');")
#con <- get_db_conn()
#DBI::dbGetQuery(con, )
}
for (l in letters[5:26]) {
#sql <-
paste0("COPY commits from '/mnt/volume_nyc1_02/mysql-2019-01-01/commits_ascii_a", l,"' WITH (FORMAT 'csv', QUOTE E'\"', ESCAPE '\', NULL '\N');")
#con <- get_db_conn()
#DBI::dbGetQuery(con, )
}
l=letters[5]
#sql <-
paste0("COPY commits from '/mnt/volume_nyc1_02/mysql-2019-01-01/commits_ascii_a", l,"' WITH (FORMAT 'csv', QUOTE E'\"', ESCAPE '\', NULL '\N');")
#sql <-
paste0("COPY commits from '/mnt/volume_nyc1_02/mysql-2019-01-01/commits_ascii_a", l,"' WITH (FORMAT 'csv', QUOTE E'\\\"', ESCAPE '\\\', NULL '\\\N');")
#sql <-
paste0("COPY commits from '/mnt/volume_nyc1_02/mysql-2019-01-01/commits_ascii_a", l,"' WITH (FORMAT 'csv', QUOTE E'\\\"', ESCAPE '\\', NULL '\\N');")
con <- get_db_conn()
get_db_conn <-
function(db_name = "ghtorrent_restore",
db_host = "postgis_2",
db_port = "5432",
db_user = Sys.getenv("db_userid"),
db_pass = Sys.getenv("db_pwd")) {
RPostgreSQL::dbConnect(
drv = RPostgreSQL::PostgreSQL(),
dbname = db_name,
host = db_host,
port = db_port,
user = db_user,
password = db_pass
)
}
con <- get_db_conn()
DBI::dbGetQuery(con, sql)
sql <- paste0("COPY commits from '/mnt/volume_nyc1_02/mysql-2019-01-01/commits_ascii_a", l,"' WITH (FORMAT 'csv', QUOTE E'\\\"', ESCAPE '\\', NULL '\\N');")
DBI::dbGetQuery(con, sql)
DBI::dbDisconnect(con)
for (l in letters[6:26]) {
sql <- paste0("COPY commits from '/mnt/volume_nyc1_02/mysql-2019-01-01/commits_ascii_a", l,"' WITH (FORMAT 'csv', QUOTE E'\\\"', ESCAPE '\\', NULL '\\N');")
con <- get_db_conn()
DBI::dbGetQuery(con, sql)
DBI::dbDisconnect(con)
}
letters[1:26]
for (l in letters[1:26]) {
sql <- paste0("COPY commits from '/mnt/volume_nyc1_02/mysql-2019-01-01/commits_ascii_b", l,"' WITH (FORMAT 'csv', QUOTE E'\\\"', ESCAPE '\\', NULL '\\N');")
con <- get_db_conn()
resp <- DBI::dbGetQuery(con, sql)
print(resp)
DBI::dbDisconnect(con)
}
for (l in letters[1:26]) {
sql <- paste0("COPY commits from '/mnt/volume_nyc1_02/mysql-2019-01-01/commits_ascii_c", l,"' WITH (FORMAT 'csv', QUOTE E'\\\"', ESCAPE '\\', NULL '\\N');")
con <- get_db_conn()
print(l)
DBI::dbGetQuery(con, sql)
DBI::dbDisconnect(con)
}
get_db_conn <-
function(db_name = "ghtorrent_restore",
db_host = "postgis_2",
db_port = "5432",
db_user = Sys.getenv("db_userid"),
db_pass = Sys.getenv("db_pwd")) {
RPostgreSQL::dbConnect(
drv = RPostgreSQL::PostgreSQL(),
dbname = db_name,
host = db_host,
port = db_port,
user = db_user,
password = db_pass
)
}
for (l in letters[1:26]) {
sql <- paste0("COPY commits from '/mnt/volume_nyc1_02/mysql-2019-01-01/commits_ascii_e", l,"' WITH (FORMAT 'csv', QUOTE E'\\\"', ESCAPE '\\', NULL '\\N');")
con <- get_db_conn()
print(l)
DBI::dbSendQuery(con, sql)
DBI::dbDisconnect(con)
}
letters[20]
letters[15]
letters[16]
for (l in letters[16:26]) {
sql <- paste0("COPY commits from '/mnt/volume_nyc1_02/mysql-2019-01-01/commits_ascii_e", l,"' WITH (FORMAT 'csv', QUOTE E'\\\"', ESCAPE '\\', NULL '\\N');")
con <- get_db_conn()
print(l)
DBI::dbSendQuery(con, sql)
DBI::dbDisconnect(con)
}
for (l in letters[17:26]) {
sql <- paste0("COPY commits from '/mnt/volume_nyc1_02/mysql-2019-01-01/commits_ascii_e", l,"' WITH (FORMAT 'csv', QUOTE E'\\\"', ESCAPE '\\', NULL '\\N');")
con <- get_db_conn()
print(l)
DBI::dbSendQuery(con, sql)
DBI::dbDisconnect(con)
}
get_db_conn <-
function(db_name = "ghtorrent_restore",
db_host = "postgis_2",
db_port = "5432",
db_user = Sys.getenv("db_userid"),
db_pass = Sys.getenv("db_pwd")) {
RPostgreSQL::dbConnect(
drv = RPostgreSQL::PostgreSQL(),
dbname = db_name,
host = db_host,
port = db_port,
user = db_user,
password = db_pass
)
}
for (l in letters[1:26]) {
sql <- paste0("COPY commits from '/mnt/volume_nyc1_02/mysql-2019-01-01/commits_ascii_no_0_a", l,"' WITH (FORMAT 'csv', QUOTE E'\\\"', ESCAPE '\\', NULL '\\N');")
con <- get_db_conn()
print(l)
DBI::dbSendQuery(con, sql)
DBI::dbDisconnect(con)
}
for (l in letters[1:26]) {
sql <- paste0("COPY commits from '/mnt/volume_nyc1_02/mysql-2019-01-01/commits_ascii_no_0_b", l,"' WITH (FORMAT 'csv', QUOTE E'\\\"', ESCAPE '\\', NULL '\\N');")
con <- get_db_conn()
print(l)
DBI::dbSendQuery(con, sql)
DBI::dbDisconnect(con)
}
for (l in letters[1:26]) {
sql <- paste0("COPY commits from '/mnt/volume_nyc1_02/mysql-2019-01-01/commits_ascii_no_0_c", l,"' WITH (FORMAT 'csv', QUOTE E'\\\"', ESCAPE '\\', NULL '\\N');")
con <- get_db_conn()
print(l)
DBI::dbSendQuery(con, sql)
DBI::dbDisconnect(con)
}
for (l in letters[1:26]) {
sql <- paste0("COPY commits from '/mnt/volume_nyc1_02/mysql-2019-01-01/commits_ascii_no_0_d", l,"' WITH (FORMAT 'csv', QUOTE E'\\\"', ESCAPE '\\', NULL '\\N');")
con <- get_db_conn()
print(l)
DBI::dbSendQuery(con, sql)
DBI::dbDisconnect(con)
}
for (l in letters[1:26]) {
sql <- paste0("COPY commits from '/mnt/volume_nyc1_02/mysql-2019-01-01/commits_ascii_no_0_e", l,"' WITH (FORMAT 'csv', QUOTE E'\\\"', ESCAPE '\\', NULL '\\N');")
con <- get_db_conn()
print(l)
DBI::dbSendQuery(con, sql)
DBI::dbDisconnect(con)
}
grant_db_permissions <- function(grant_database, grant_username, schema = "public", db_user = Sys.getenv("db_userid"), db_pass = Sys.getenv("db_pwd"), db_host = "postgis_1", db_port = "5432") {
con <- DBI::dbConnect(drv = RPostgreSQL::PostgreSQL(),
dbname = grant_database,
host = db_host,
port = db_port,
user = db_user,
password = db_pass)
DBI::dbExecute(con, paste0("GRANT ALL ON DATABASE ", grant_database," TO ", grant_username))
print(paste0("GRANT ALL ON DATABASE ", grant_database," TO ", grant_username))
DBI::dbExecute(con, paste0("GRANT ALL ON SCHEMA ", schema," TO ", grant_username))
print(paste0("GRANT ALL ON SCHEMA ", schema," TO ", grant_username))
DBI::dbExecute(con, paste0("GRANT ALL ON ALL TABLES IN SCHEMA ", schema," TO ", grant_username))
print(paste0("GRANT ALL ON ALL TABLES IN SCHEMA ", schema," TO ", grant_username))
DBI::dbExecute(con, paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON TABLES TO ", grant_username))
print(paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON TABLES TO ", grant_username))
DBI::dbExecute(con, paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON SEQUENCES TO ", grant_username))
print(paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON SEQUENCES TO ", grant_username))
DBI::dbDisconnect(con)
}
grant_db_permissions("corelogic", "jrg3bs", db_host = "postgis_2")
create_db_user <- function(new_username, db_user = Sys.getenv("db_userid"), db_pass = Sys.getenv("db_pwd"), db_host = "postgis_1", db_port = "5432", db_user_database = Sys.getenv("db_userid")) {
con <- DBI::dbConnect(drv = RPostgreSQL::PostgreSQL(),
dbname = db_user_database,
host = db_host,
port = db_port,
user = db_user,
password = db_pass)
u <- DBI::dbGetQuery(con, paste0("SELECT 1 FROM pg_catalog.pg_roles WHERE rolname = '", new_username,"'"))
if (nrow(u) == 0) {
e <- DBI::dbExecute(con, paste0("CREATE USER ", new_username," WITH PASSWORD '", new_username, "'"))
if (e == 0) print(paste("Created User", new_username))
} else {
print(paste("User", new_username, "Already Exists"))
}
d <- DBI::dbGetQuery(con, paste0("SELECT 1 FROM pg_database WHERE datname = '", new_username,"'"))
if (nrow(d) == 0) {
e <- DBI::dbExecute(con, paste0("CREATE DATABASE ", new_username))
if (e == 0) print(paste("Created Database", new_username))
} else {
print(paste("Database", new_username, "Already Exists"))
}
DBI::dbExecute(con, paste0("GRANT ALL ON DATABASE ", new_username," TO ", new_username))
print(paste0("GRANT ALL ON DATABASE ", new_username," TO ", new_username))
con2 <- DBI::dbConnect(drv = RPostgreSQL::PostgreSQL(),
dbname = new_username,
host = db_host,
port = db_port,
user = db_user,
password = db_pass)
DBI::dbExecute(con2, paste0("GRANT ALL ON ALL TABLES IN SCHEMA public TO ", new_username))
print(paste0("GRANT ALL ON ALL TABLES IN SCHEMA public TO ", new_username))
DBI::dbExecute(con2, paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO ", new_username))
print(paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO ", new_username))
DBI::dbExecute(con2, paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO ", new_username))
print(paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO ", new_username))
DBI::dbDisconnect(con)
DBI::dbDisconnect(con2)
}
create_db_user("jrg3bs", db_host = "postgis_2")
create_db_user("tp2sk", db_host = "postgis_2")
create_db_user("jbs3hp", db_host = "postgis_2")
grant_db_permissions("corelogic", "jrg3bs", db_host = "postgis_2")
grant_db_permissions("corelogic", "tp2sk", db_host = "postgis_2")
grant_db_permissions("corelogic", "jbs3hp", db_host = "postgis_2")
grant_db_permissions("ghtorrent_restore", "jbs3hp", db_host = "postgis_2")
grant_db_permissions <- function(grant_database, grant_username, schema = "public", db_user = Sys.getenv("db_userid"), db_pass = Sys.getenv("db_pwd"), db_host = "postgis_1", db_port = "5432") {
con <- DBI::dbConnect(drv = RPostgreSQL::PostgreSQL(),
dbname = grant_database,
host = db_host,
port = db_port,
user = db_user,
password = db_pass)
DBI::dbExecute(con, paste0("GRANT ALL ON DATABASE ", grant_database," TO ", grant_username))
print(paste0("GRANT ALL ON DATABASE ", grant_database," TO ", grant_username))
DBI::dbExecute(con, paste0("GRANT ALL ON SCHEMA ", schema," TO ", grant_username))
print(paste0("GRANT ALL ON SCHEMA ", schema," TO ", grant_username))
DBI::dbExecute(con, paste0("GRANT ALL ON ALL TABLES IN SCHEMA ", schema," TO ", grant_username))
print(paste0("GRANT ALL ON ALL TABLES IN SCHEMA ", schema," TO ", grant_username))
DBI::dbExecute(con, paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON TABLES TO ", grant_username))
print(paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON TABLES TO ", grant_username))
DBI::dbExecute(con, paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON SEQUENCES TO ", grant_username))
print(paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA ", schema," GRANT ALL ON SEQUENCES TO ", grant_username))
DBI::dbDisconnect(con)
}
grant_db_permissions("ghtorrent_restore", "jbs3hp", db_host = "postgis_2")
# DB Functions
source("db/src/db_create_user.R")
source("db/src/db_grant_permissions.R")
# CREATE DB ACCOUNTS ----
# SDAD Staff
db_users_sdad <- data.table::fread("db/src/users_sdad.csv")[, uid]
db_users_dspg2019 <- data.table::fread("db/src/users_dspg2019.csv")[, uid]
# All Users
db_users <- c(db_users_dspg2019, db_users_sdad)
# Create users
source("db/src/db_create_user.R")
# Create users
source("db/src/db_create_user.R")
for (dbu in db_users) {
create_db_user(dbu, db_host = "postgis_2")
}
# Grant all permissions on grant_database to grant_user
source("db/src/db_grant_permissions.R")
# Grant all permissions on grant_database to grant_user
source("db/src/db_grant_permissions.R")
for (dbu in db_users) {
grant_db_permissions(grant_username = dbu, grant_database = "gis", schema = "census_cb", db_host = "postgis_2")
}
for (dbu in db_users) {
grant_db_permissions(grant_username = dbu, grant_database = "ghtorrent_restore", schema = "public", db_host = "postgis_2")
}
for (dbu in db_users) {
grant_db_permissions(grant_username = dbu, grant_database = "corelogic", schema = "public", db_host = "postgis_2")
}
# DB Functions
source("db/src/db_create_user.R")
source("db/src/db_grant_permissions.R")
grant_db_permissions("kb7hp", "ghtorrent_restore", schema = "public", db_host = "postgis_2")
grant_db_permissions(grant_username = "kb7hp", grant_database = "ghtorrent_restore", schema = "public", db_host = "postgis_2")
# DB Functions
source("db/src/db_create_user.R")
source("db/src/db_grant_permissions.R")
grant_db_permissions(grant_username = "jbs3hp", grant_database = "burning_glass", schema = "public", db_host = "postgis_2")
grant_db_permissions(grant_username = "dtn2ep", grant_database = "burning_glass", schema = "public", db_host = "postgis_2")
grant_db_permissions(grant_username = "nr3xe", grant_database = "burning_glass", schema = "public", db_host = "postgis_2")
grant_db_permissions(grant_username = "sc2pg", grant_database = "burning_glass", schema = "public", db_host = "postgis_2")
# DB Functions
source("db/src/db_create_user.R")
source("db/src/db_grant_permissions.R")
grant_db_permissions(grant_username = "kb7hp", grant_database = "ghtorrent_restore", schema = "public", db_host = "postgis_2")

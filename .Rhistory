con <- sdalr::con_db(dbname = "sdad", host = "127.0.0.1", port = 5433, user = "anonymous", pass = "anonymous")
# get census block groups
sql <- "SELECT distinct \"GEOID\" geoid, geometry
FROM tl_2018_19_bg where left(\"GEOID\", 5) = '19127'"
bg_geos <- sf::st_read(con, query = sql)
sql="select * from cb_2016_51_county_within_ua_500k"
bg_geos <- sf::st_read(con, query = sql)
con <- sdalr::con_db(dbname = "sdad", host = "127.0.0.1", port = 5433, user = "anonymous", pass = "anonymous")
sql="select * from cb_2016_51_county_within_ua_500k"
bg_geos <- sf::st_read(con, query = sql)
sql="select * from geospatial$census_cb.cb_2016_51_county_within_ua_500k"
bg_geos <- sf::st_read(con, query = sql)
# get census block groups
sql <- "SELECT distinct \"GEOID\" geoid, geometry
FROM tl_2018_19_bg where left(\"GEOID\", 5) = '19127'"
bg_geos <- sf::st_read(con, query = sql)
sql <- "select * from geospatial$census_cb.cb_2016_51_county_within_ua_500k"
con <- sdalr::con_db(dbname = "sdad", host = "127.0.0.1", port = 5433, user = "anonymous", pass = "anonymous")
bg_geos <- sf::st_read(con, query = sql)
library(tinytex)
knitr::opts_chunk$set(echo = TRUE)
library(tinytex)
summary(cars)
plot(pressure)
knit_with_parameters('~/git/docker_sdad/rmdtest.Rmd')
knitr::opts_chunk$set(echo = TRUE)
library(tinytex)
summary(cars)
plot(pressure)
library(rticles)
rticles::acm_article()
rmarkdown::draft("MyJSSArticle.Rmd", template = "jss_article", package = "rticles")
install.packages("pandoc")
install.packages("jss")
create_db_user <- function(database, new_username, db_user = Sys.getenv("db_userid"), db_pass = Sys.getenv("db_pwd")) {
con <- DBI::dbConnect(drv = RPostgreSQL::PostgreSQL(),
dbname = database,
host = "127.0.0.1",
port = "5433",
user = db_user,
password = db_pass)
u <- DBI::dbGetQuery(con, paste0("SELECT 1 FROM pg_catalog.pg_roles WHERE rolname = '", new_username,"'"))
if (nrow(u) == 0) {
e <- DBI::dbExecute(con, paste0("CREATE USER ", new_username," WITH PASSWORD '", new_username, "'"))
if (e == 0) print(paste("Created User", new_username))
} else {
print(paste("User", new_username, "Already Exists"))
}
d <- DBI::dbGetQuery(con, paste0("SELECT 1 FROM pg_database WHERE datname = '", new_username,"'"))
if (nrow(d) == 0) {
e <- DBI::dbExecute(con, paste0("CREATE DATABASE ", new_username))
if (e == 0) print(paste("Created Database", new_username))
} else {
print(paste("Database", new_username, "Already Exists"))
}
DBI::dbExecute(con, paste0("GRANT ALL ON DATABASE ", new_username," TO ", new_username))
print(paste0("GRANT ALL ON DATABASE ", new_username," TO ", new_username))
con2 <- DBI::dbConnect(drv = RPostgreSQL::PostgreSQL(),
dbname = new_username,
host = "127.0.0.1",
port = "5433",
user = db_user,
password = db_pass)
DBI::dbExecute(con2, paste0("GRANT ALL ON ALL TABLES IN SCHEMA public TO ", new_username))
print(paste0("GRANT ALL ON ALL TABLES IN SCHEMA public TO ", new_username))
DBI::dbExecute(con2, paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO ", new_username))
print(paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO ", new_username))
DBI::dbExecute(con2, paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO ", new_username))
print(paste0("ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO ", new_username))
DBI::dbDisconnect(con)
DBI::dbDisconnect(con2)
}
create_db_user("ads7fg", "ap3xx")
create_db_user("ads7fg", "af5ug")
create_db_user("ads7fg", "ks6pn")
create_db_user("ads7fg", "qn6au")
create_db_user("ads7fg", "cc2cm")
create_db_user("ads7fg", "sak9tr")
create_db_user("ads7fg", "sss5sc")

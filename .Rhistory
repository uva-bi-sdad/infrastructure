stringr::str_to_lower()
end <- stringr::str_sub(str, loc[2]-1)
new <- paste0(strt, inner, end)
out <- c(out, new)
} else {
out <- c(out, str)
}
}
out
}
fix_acronyms(col_names[1:2])
fix_acronyms <- function(str) {
browser()
out <- list()
for(i in 1:length(str)) {
loc <- stringr::str_locate(str[i], "[:upper:]([:upper:]+)?[:lower:]")
if (!is.na(loc[1]) & loc[2]-1 != loc[1]) {
strt <- stringr::str_sub(str[i], loc[1], loc[1])
inner <- stringr::str_sub(str[i], loc[1]+1, loc[2]-2) %>%
stringr::str_to_lower()
end <- stringr::str_sub(str[i], loc[2]-1)
new <- paste0(strt, inner, end)
out <- c(out, new)
} else {
out <- c(out, str)
}
}
out
}
fix_acronyms(col_names[1:2])
fix_acronyms <- function(str) {
#browser()
out <- list()
for(i in 1:length(str)) {
loc <- stringr::str_locate(str[i], "[:upper:]([:upper:]+)?[:lower:]")
if (!is.na(loc[1]) & loc[2]-1 != loc[1]) {
strt <- stringr::str_sub(str[i], loc[1], loc[1])
inner <- stringr::str_sub(str[i], loc[1]+1, loc[2]-2) %>%
stringr::str_to_lower()
end <- stringr::str_sub(str[i], loc[2]-1)
new <- paste0(strt, inner, end)
out <- c(out, new)
} else {
out <- c(out, str[i])
}
}
out
}
fix_acronyms(col_names[1:2])
col_names_fix_acronyms <- fix_acronyms(col_names)
View(col_names_fix_acronyms)
col_names_fix_acronyms[[23]]
s <- "Multi-APNFlag"
str-s
str=s
loc <- stringr::str_locate(str[i], "[:upper:]([:upper:]+)?[:lower:]")
i=1
loc <- stringr::str_locate(str[i], "[:upper:]([:upper:]+)?[:lower:]")
loc <- stringr::str_locate_all(str[i], "[:upper:]([:upper:]+)?[:lower:]")
View(loc)
stringr::str_to_title("FIPSCode")
stringr::str_sub(stringr::str_to_title("FIPSCode"), 1, length("FIPSCode"))
stringr::str_sub(stringr::str_to_title("FIPSCode"), 1, nchar("FIPSCode"))
stringr::str_sub(stringr::str_to_title("FIPSCode"), 1, nchar("FIPSCode") - 1)
library(stringr)
stringr::str_sub("Multi-APNFlag"), "([:upper:][:upper:]+)?[:lower:]")
stringr::str_sub("Multi-APNFlag", "([:upper:][:upper:]+)?[:lower:]")
stringr::str_match_all("Multi-APNFlag", "([:upper:][:upper:]+)?[:lower:]")
stringr::str_match("Multi-APNFlag", "([:upper:][:upper:]+)?[:lower:]")
stringr::str_match("Multi-APNFlag", "([:upper:][:upper:][:upper:]+)?[:lower:]")
stringr::str_match("Multi-APNFlag", "([:upper:][:upper:][:upper:]+)?[")
stringr::str_match("Multi-APNFlag", "[:upper:][:upper:]([:upper:]+)?[:lower:]")
stringr::str_match("Multi-APNFlag", "([:upper:][:upper:]([:upper:]+)?)[:lower:]")
str_sub(stringr::str_match("Multi-APNFlag", "([:upper:][:upper:]([:upper:]+)?)[:lower:]"), 1, 3)
stringr::str_match("Multi-APNFlag", "([:upper:][:upper:]([:upper:]+)?)[:lower:]")
stringr::str_match("Multi-APNFlag", "([:upper:][:upper:]([:upper:]+)?)[:lower:]")[2]
acro <- stringr::str_match("Multi-APNFlag", "([:upper:][:upper:]([:upper:]+)?)[:lower:]")[2]
nchar(acro)
str_sub(acro, 1, nchar(acro) - 1)
str_to_title(str_sub(acro, 1, nchar(acro) - 1) )
acro <- stringr::str_match("Multi-APNFlag", "([:upper:][:upper:]([:upper:]+)?)[:lower:]")[2]
acro2 <- str_sub(1, nchar(acro) - 1) %>%
str_to_title()
acro2
acro
nchar(acro)
str_sub(1, nchar(acro) - 1)
str_sub(1, nchar(acro) - 1)
nchar(acro) - 1
acro2 <- str_sub(acro, 1, nchar(acro) - 1) %>%
str_to_title()
acro2
acro <- stringr::str_match("Multi-APNFlag", "([:upper:][:upper:]([:upper:]+)?)[:lower:]")[2]
acro2 <- str_sub(acro, 1, nchar(acro) - 1)
acro3 <- str_to_title(acro2)
str_replace("Multi-APNFlag", acro2, acro3)
str <- "Multi-APNFlag"
acro <- stringr::str_match(str, "([:upper:][:upper:]([:upper:]+)?)[:lower:]")[2]
acro2 <- str_sub(acro, 1, nchar(acro) - 1)
acro3 <- str_to_title(acro2)
str_replace(str, acro2, acro3)
str <- c("Multi-APNFlag", "NoAcronymsHere", "FIPSCode")
for(i in 1:length(str)) {
acro <- stringr::str_match(str[i], "([:upper:][:upper:]([:upper:]+)?)[:lower:]")[2]
acro2 <- str_sub(acro, 1, nchar(acro) - 1)
acro3 <- str_to_title(acro2)
str_replace(str[i], acro2, acro3)
}
for(i in 1:length(str)) {
acro <- stringr::str_match(str[i], "([:upper:][:upper:]([:upper:]+)?)[:lower:]")[2]
acro2 <- str_sub(acro, 1, nchar(acro) - 1)
acro3 <- str_to_title(acro2)
print(str_replace(str[i], acro2, acro3))
}
i=2
acro <- stringr::str_match(str[i], "([:upper:][:upper:]([:upper:]+)?)[:lower:]")[2]
acro
is.na(acro)
for(i in 1:length(str)) {
acro <- stringr::str_match(str[i], "([:upper:][:upper:]([:upper:]+)?)[:lower:]")[2]
if (!is.na(acro)) {
acro2 <- str_sub(acro, 1, nchar(acro) - 1)
acro3 <- str_to_title(acro2)
str_replace(str[i], acro2, acro3)
} else {
str
}
}
for(i in 1:length(str)) {
acro <- stringr::str_match(str[i], "([:upper:][:upper:]([:upper:]+)?)[:lower:]")[2]
if (!is.na(acro)) {
acro2 <- str_sub(acro, 1, nchar(acro) - 1)
acro3 <- str_to_title(acro2)
print(str_replace(str[i], acro2, acro3))
} else {
print(str)
}
}
for(i in 1:length(str)) {
acro <- stringr::str_match(str[i], "([:upper:][:upper:]([:upper:]+)?)[:lower:]")[2]
if (!is.na(acro)) {
acro2 <- str_sub(acro, 1, nchar(acro) - 1)
acro3 <- str_to_title(acro2)
print(str_replace(str[i], acro2, acro3))
} else {
print(str[i])
}
}
fix_acronyms <- function(str) {
for(i in 1:length(str)) {
acro <- stringr::str_match(str[i], "([:upper:][:upper:]([:upper:]+)?)[:lower:]")[2]
if (!is.na(acro)) {
acro2 <- str_sub(acro, 1, nchar(acro) - 1)
acro3 <- str_to_title(acro2)
print(str_replace(str[i], acro2, acro3))
} else {
print(str[i])
}
}
}
fix_acronyms(col_names)
col_names_fix_acronyms <- fix_acronyms(col_names)
col_names_fixed <- dataplumbr::name.standard_col_names(col_names_fix_acronyms, fix_camel = T)
col_names_fixed
col_names_fix_acronyms <- fix_acronyms(col_names)
fix_acronyms <- function(str) {
for(i in 1:length(str)) {
acro <- stringr::str_match(str[i], "([:upper:][:upper:]([:upper:]+)?)[:lower:]")[2]
if (!is.na(acro)) {
acro2 <- str_sub(acro, 1, nchar(acro) - 1)
acro3 <- str_to_title(acro2)
str_replace(str[i], acro2, acro3)
} else {
str[i]
}
}
}
col_names_fix_acronyms <- fix_acronyms(col_names)
col_names_fixed <- dataplumbr::name.standard_col_names(col_names_fix_acronyms, fix_camel = T)
col_names_fixed
col_names_fix_acronyms
fix_acronyms <- function(str) {
for(i in 1:length(str)) {
acro <- stringr::str_match(str[i], "([:upper:][:upper:]([:upper:]+)?)[:lower:]")[2]
if (!is.na(acro)) {
acro2 <- str_sub(acro, 1, nchar(acro) - 1)
acro3 <- str_to_title(acro2)
out <- str_replace(str[i], acro2, acro3)
} else {
out <- str[i]
}
}
out
}
col_names_fix_acronyms <- fix_acronyms(col_names)
col_names_fix_acronyms
fix_acronyms <- function(str) {
out <- list()
for(i in 1:length(str)) {
acro <- stringr::str_match(str[i], "([:upper:][:upper:]([:upper:]+)?)[:lower:]")[2]
if (!is.na(acro)) {
acro2 <- str_sub(acro, 1, nchar(acro) - 1)
acro3 <- str_to_title(acro2)
out <- c(out, str_replace(str[i], acro2, acro3))
} else {
out <- c(out, str[i])
}
}
out
}
col_names_fix_acronyms <- fix_acronyms(col_names)
col_names_fixed <- dataplumbr::name.standard_col_names(col_names_fix_acronyms, fix_camel = T)
col_names_fixed
col_types[col_types == "bit"] <- "boolean"
col_types[col_types == "int"] <- "integer"
new_col_defs <- paste(col_names_fixed, col_types, col_nulls, "\n", collapse = ", ")
new_ddl <- paste0("CREATE TABLE ", new_schema, ".", new_table," (", new_col_defs, ")")
cat(new_ddl)
#' Change acronyms (multiple capital letters) to title case
#' @param str List of colnames to convert.
#' @export
#' @examples
#' name.fix_acronyms(c("FIPSCode", "NoAcronymHere", "Multi-APNFlag"))
#' [1] "I'm_A_Camel"    "No_You_Are_Not"
name.fix_acronyms <- function (str = c("FIPSCode", "NoAcronymHere", "Multi-APNFlag"))
{
out <- list()
for(i in 1:length(str)) {
acro <- stringr::str_match(str[i], "([:upper:][:upper:]([:upper:]+)?)[:lower:]")[2]
if (!is.na(acro)) {
acro2 <- str_sub(acro, 1, nchar(acro) - 1)
acro3 <- str_to_title(acro2)
out <- c(out, str_replace(str[i], acro2, acro3))
} else {
out <- c(out, str[i])
}
}
out
}
name.fix_acronyms()
unlist(name.fix_acronyms())
#' Change acronyms (multiple capital letters) to title case
#' @param str List of colnames to convert.
#' @export
#' @examples
#' name.fix_acronyms(c("FIPSCode", "NoAcronymHere", "Multi-APNFlag"))
#' [1] "I'm_A_Camel"    "No_You_Are_Not"
name.fix_acronyms <- function (str = c("FIPSCode", "NoAcronymHere", "Multi-APNFlag"))
{
out <- list()
for(i in 1:length(str)) {
acro <- stringr::str_match(str[i], "([:upper:][:upper:]([:upper:]+)?)[:lower:]")[2]
if (!is.na(acro)) {
acro2 <- str_sub(acro, 1, nchar(acro) - 1)
acro3 <- str_to_title(acro2)
out <- c(out, str_replace(str[i], acro2, acro3))
} else {
out <- c(out, str[i])
}
}
unlist(out)
}
devtools::install_github("dads2busy/dataplumbr", force=T)
col_names
sql_parsed <- stringr::str_match_all(sql_fix_str, ",(.*?)[:space:]([a-z]+.*?)[:space:](.*?[Nn][Uu][Ll][Ll])")
col_names <- sql_parsed[[1]][,2]
col_types <- sql_parsed[[1]][,3]
col_nulls <- sql_parsed[[1]][,4]
col_names
col_names_fixed <- dataplumbr::name.standard_col_names(name.fix_acronyms(col_names), fix_camel = T)
col_names_fixed
devtools::install_github("dads2busy/dataplumbr", force=T)
library(dataplumbr)
library(magrittr)
library(dataplumbr)
sql <- readr::read_lines("../../Desktop/blkknight/ReferenceScript/Create_Table_DEED.sql")
new_schema <- "blackknight"
new_table <- "deed_20210621"
sql_fix <- stringr::str_remove_all(sql, "[\\[\\]]") %>%
stringr::str_replace("Create[:space:]TABLE[:space:].*?\\(", ",") %>%
stringr::str_remove("TABLE[:space:]dbo.*?[:space:]") %>%
stringr::str_remove("^.*ON PRIMARY.*$")
sql_fix_str <- paste(sql_fix, collapse = "")
sql_parsed <- stringr::str_match_all(sql_fix_str, ",(.*?)[:space:]([a-z]+.*?)[:space:](.*?[Nn][Uu][Ll][Ll])")
col_names <- sql_parsed[[1]][,2]
col_types <- sql_parsed[[1]][,3]
col_nulls <- sql_parsed[[1]][,4]
col_names_fixed <- dataplumbr::name.standard_col_names(col_names, fix_acronyms = T, fix_camel = T)
col_names_fixed
col_types[col_types == "bit"] <- "boolean"
col_types[col_types == "int"] <- "integer"
new_col_defs <- paste(col_names_fixed, col_types, col_nulls, "\n", collapse = ", ")
new_ddl <- paste0("CREATE TABLE ", new_schema, ".", new_table," (", new_col_defs, ")")
cat(new_ddl)
sql_file <- "Create_Table_DEED.sql"
name("Create_Table_DEED.sql")
tools::file_ext("Create_Table_DEED.sql")
basename("Create_Table_DEED.sql")
strsplit("Create_Table_DEED.sql", "\\.")[[1]]
strsplit("Create_Table_DEED.sql", "\\.")[[1]][1]
strsplit(sql_file, "\\.")[[1]][1]
library(magrittr)
library(dataplumbr)
sql_file <- "Create_Table_DEED.sql"
sql <- readr::read_lines(paste0("../../Desktop/blkknight/ReferenceScript/", sql_file))
new_schema <- "blackknight"
new_table <- "deed_20210621"
sql_fix <- stringr::str_remove_all(sql, "[\\[\\]]") %>%
stringr::str_replace("Create[:space:]TABLE[:space:].*?\\(", ",") %>%
stringr::str_remove("TABLE[:space:]dbo.*?[:space:]") %>%
stringr::str_remove("^.*ON PRIMARY.*$")
sql_fix_str <- paste(sql_fix, collapse = "")
sql_parsed <- stringr::str_match_all(sql_fix_str, ",(.*?)[:space:]([a-z]+.*?)[:space:](.*?[Nn][Uu][Ll][Ll])")
col_names <- sql_parsed[[1]][,2]
col_types <- sql_parsed[[1]][,3]
col_nulls <- sql_parsed[[1]][,4]
#col_names_fix_acronyms <- fix_acronyms(col_names)
col_names_fixed <- dataplumbr::name.standard_col_names(col_names, fix_acronyms = T, fix_camel = T)
col_types[col_types == "bit"] <- "boolean"
col_types[col_types == "int"] <- "integer"
new_col_defs <- paste(col_names_fixed, col_types, col_nulls, "\n", collapse = ", ")
new_ddl <- paste0("CREATE TABLE ", new_schema, ".", new_table," (", new_col_defs, ")")
cat(new_ddl)
readr::write_lines(new_ddl, paste0("../../Desktop/blkknight/ReferenceScript/", strsplit(sql_file, "\\.")[[1]][1],"_psql.sql"))
sql_file <- "Create_Table_DEED_Orphan.sql"
sql <- readr::read_lines(paste0("../../Desktop/blkknight/ReferenceScript/", sql_file))
new_schema <- "blackknight"
new_table <- "deed_20210621"
sql_fix <- stringr::str_remove_all(sql, "[\\[\\]]") %>%
stringr::str_replace("Create[:space:]TABLE[:space:].*?\\(", ",") %>%
stringr::str_remove("TABLE[:space:]dbo.*?[:space:]") %>%
stringr::str_remove("^.*ON PRIMARY.*$")
sql_fix_str <- paste(sql_fix, collapse = "")
sql_parsed <- stringr::str_match_all(sql_fix_str, ",(.*?)[:space:]([a-z]+.*?)[:space:](.*?[Nn][Uu][Ll][Ll])")
col_names <- sql_parsed[[1]][,2]
col_types <- sql_parsed[[1]][,3]
col_nulls <- sql_parsed[[1]][,4]
#col_names_fix_acronyms <- fix_acronyms(col_names)
col_names_fixed <- dataplumbr::name.standard_col_names(col_names, fix_acronyms = T, fix_camel = T)
col_types[col_types == "bit"] <- "boolean"
col_types[col_types == "int"] <- "integer"
new_col_defs <- paste(col_names_fixed, col_types, col_nulls, "\n", collapse = ", ")
new_ddl <- paste0("CREATE TABLE ", new_schema, ".", new_table," (", new_col_defs, ")")
cat(new_ddl)
readr::write_lines(new_ddl, paste0("../../Desktop/blkknight/ReferenceScript/", strsplit(sql_file, "\\.")[[1]][1],"_psql.sql"))
sql_file <- "Create_Table_SAM.sql"
sql <- readr::read_lines(paste0("../../Desktop/blkknight/ReferenceScript/", sql_file))
sql_file <- "Create_Table_SAM2.sql"
sql <- readr::read_lines(paste0("../../Desktop/blkknight/ReferenceScript/", sql_file))
sql_file <- "Create_Table_SAM2.sql"
new_schema <- "blackknight"
new_table <- "sam_20210621"
sql <- readr::read_lines(paste0("../../Desktop/blkknight/ReferenceScript/", sql_file))
sql_fix <- stringr::str_remove_all(sql, "[\\[\\]]") %>%
stringr::str_replace("Create[:space:]TABLE[:space:].*?\\(", ",") %>%
stringr::str_remove("TABLE[:space:]dbo.*?[:space:]") %>%
stringr::str_remove("^.*ON PRIMARY.*$")
sql_fix_str <- paste(sql_fix, collapse = "")
sql_parsed <- stringr::str_match_all(sql_fix_str, ",(.*?)[:space:]([a-z]+.*?)[:space:](.*?[Nn][Uu][Ll][Ll])")
col_names <- sql_parsed[[1]][,2]
col_types <- sql_parsed[[1]][,3]
col_nulls <- sql_parsed[[1]][,4]
#col_names_fix_acronyms <- fix_acronyms(col_names)
col_names_fixed <- dataplumbr::name.standard_col_names(col_names, fix_acronyms = T, fix_camel = T)
col_types[col_types == "bit"] <- "boolean"
col_types[col_types == "int"] <- "integer"
new_col_defs <- paste(col_names_fixed, col_types, col_nulls, "\n", collapse = ", ")
new_ddl <- paste0("CREATE TABLE ", new_schema, ".", new_table," (", new_col_defs, ")")
cat(new_ddl)
readr::write_lines(new_ddl, paste0("../../Desktop/blkknight/ReferenceScript/", strsplit(sql_file, "\\.")[[1]][1],"_psql.sql"))
sql_file <- "Create_Table_SAM_Orphan2.sql"
new_schema <- "blackknight"
new_table <- "sam_orphan_20210621"
sql <- readr::read_lines(paste0("../../Desktop/blkknight/ReferenceScript/", sql_file))
sql_fix <- stringr::str_remove_all(sql, "[\\[\\]]") %>%
stringr::str_replace("Create[:space:]TABLE[:space:].*?\\(", ",") %>%
stringr::str_remove("TABLE[:space:]dbo.*?[:space:]") %>%
stringr::str_remove("^.*ON PRIMARY.*$")
sql_fix_str <- paste(sql_fix, collapse = "")
sql_parsed <- stringr::str_match_all(sql_fix_str, ",(.*?)[:space:]([a-z]+.*?)[:space:](.*?[Nn][Uu][Ll][Ll])")
col_names <- sql_parsed[[1]][,2]
col_types <- sql_parsed[[1]][,3]
col_nulls <- sql_parsed[[1]][,4]
#col_names_fix_acronyms <- fix_acronyms(col_names)
col_names_fixed <- dataplumbr::name.standard_col_names(col_names, fix_acronyms = T, fix_camel = T)
col_types[col_types == "bit"] <- "boolean"
col_types[col_types == "int"] <- "integer"
new_col_defs <- paste(col_names_fixed, col_types, col_nulls, "\n", collapse = ", ")
new_ddl <- paste0("CREATE TABLE ", new_schema, ".", new_table," (", new_col_defs, ")")
cat(new_ddl)
readr::write_lines(new_ddl, paste0("../../Desktop/blkknight/ReferenceScript/", strsplit(sql_file, "\\.")[[1]][1],"_psql.sql"))
sql_file <- "Create_Table_DEED_Orphan.sql"
new_schema <- "blackknight"
new_table <- "deed_orphan_20210621"
sql <- readr::read_lines(paste0("../../Desktop/blkknight/ReferenceScript/", sql_file))
sql_fix <- stringr::str_remove_all(sql, "[\\[\\]]") %>%
stringr::str_replace("Create[:space:]TABLE[:space:].*?\\(", ",") %>%
stringr::str_remove("TABLE[:space:]dbo.*?[:space:]") %>%
stringr::str_remove("^.*ON PRIMARY.*$")
sql_fix_str <- paste(sql_fix, collapse = "")
sql_parsed <- stringr::str_match_all(sql_fix_str, ",(.*?)[:space:]([a-z]+.*?)[:space:](.*?[Nn][Uu][Ll][Ll])")
col_names <- sql_parsed[[1]][,2]
col_types <- sql_parsed[[1]][,3]
col_nulls <- sql_parsed[[1]][,4]
#col_names_fix_acronyms <- fix_acronyms(col_names)
col_names_fixed <- dataplumbr::name.standard_col_names(col_names, fix_acronyms = T, fix_camel = T)
col_types[col_types == "bit"] <- "boolean"
col_types[col_types == "int"] <- "integer"
new_col_defs <- paste(col_names_fixed, col_types, col_nulls, "\n", collapse = ", ")
new_ddl <- paste0("CREATE TABLE ", new_schema, ".", new_table," (", new_col_defs, ")")
cat(new_ddl)
readr::write_lines(new_ddl, paste0("../../Desktop/blkknight/ReferenceScript/", strsplit(sql_file, "\\.")[[1]][1],"_psql.sql"))
sql_file <- "Create_Table_ASMT.sql"
new_schema <- "blackknight"
new_table <- "asmt_20210621"
sql <- readr::read_lines(paste0("../../Desktop/blkknight/ReferenceScript/", sql_file))
sql_fix <- stringr::str_remove_all(sql, "[\\[\\]]") %>%
stringr::str_replace("Create[:space:]TABLE[:space:].*?\\(", ",") %>%
stringr::str_remove("TABLE[:space:]dbo.*?[:space:]") %>%
stringr::str_remove("^.*ON PRIMARY.*$")
sql_fix_str <- paste(sql_fix, collapse = "")
sql_parsed <- stringr::str_match_all(sql_fix_str, ",(.*?)[:space:]([a-z]+.*?)[:space:](.*?[Nn][Uu][Ll][Ll])")
col_names <- sql_parsed[[1]][,2]
col_types <- sql_parsed[[1]][,3]
col_nulls <- sql_parsed[[1]][,4]
#col_names_fix_acronyms <- fix_acronyms(col_names)
col_names_fixed <- dataplumbr::name.standard_col_names(col_names, fix_acronyms = T, fix_camel = T)
col_types[col_types == "bit"] <- "boolean"
col_types[col_types == "int"] <- "integer"
new_col_defs <- paste(col_names_fixed, col_types, col_nulls, "\n", collapse = ", ")
new_ddl <- paste0("CREATE TABLE ", new_schema, ".", new_table," (", new_col_defs, ")")
cat(new_ddl)
readr::write_lines(new_ddl, paste0("../../Desktop/blkknight/ReferenceScript/", strsplit(sql_file, "\\.")[[1]][1],"_psql.sql"))
sql_file <- "Create_table_Deed_Orphan.sql"
new_schema <- "blackknight"
new_table <- "deed_orphan_20210621"
sql <- readr::read_lines(paste0("../../Desktop/blkknight/ReferenceScript/", sql_file))
sql_fix <- stringr::str_remove_all(sql, "[\\[\\]]") %>%
stringr::str_replace("Create[:space:]TABLE[:space:].*?\\(", ",") %>%
stringr::str_remove("TABLE[:space:]dbo.*?[:space:]") %>%
stringr::str_remove("^.*ON PRIMARY.*$")
sql_fix_str <- paste(sql_fix, collapse = "")
sql_parsed <- stringr::str_match_all(sql_fix_str, ",(.*?)[:space:]([a-z]+.*?)[:space:](.*?[Nn][Uu][Ll][Ll])")
col_names <- sql_parsed[[1]][,2]
col_types <- sql_parsed[[1]][,3]
col_nulls <- sql_parsed[[1]][,4]
#col_names_fix_acronyms <- fix_acronyms(col_names)
col_names_fixed <- dataplumbr::name.standard_col_names(col_names, fix_acronyms = T, fix_camel = T)
col_types[col_types == "bit"] <- "boolean"
col_types[col_types == "int"] <- "integer"
new_col_defs <- paste(col_names_fixed, col_types, col_nulls, "\n", collapse = ", ")
new_ddl <- paste0("CREATE TABLE ", new_schema, ".", new_table," (", new_col_defs, ")")
cat(new_ddl)
readr::write_lines(new_ddl, paste0("../../Desktop/blkknight/ReferenceScript/", strsplit(sql_file, "\\.")[[1]][1],"_psql.sql"))
sql_file <- "Create_table_Deed_Orphan2.sql"
new_schema <- "blackknight"
new_table <- "deed_orphan_20210621"
sql <- readr::read_lines(paste0("../../Desktop/blkknight/ReferenceScript/", sql_file))
sql_fix <- stringr::str_remove_all(sql, "[\\[\\]]") %>%
stringr::str_replace("Create[:space:]TABLE[:space:].*?\\(", ",") %>%
stringr::str_remove("TABLE[:space:]dbo.*?[:space:]") %>%
stringr::str_remove("^.*ON PRIMARY.*$")
sql_fix_str <- paste(sql_fix, collapse = "")
sql_parsed <- stringr::str_match_all(sql_fix_str, ",(.*?)[:space:]([a-z]+.*?)[:space:](.*?[Nn][Uu][Ll][Ll])")
col_names <- sql_parsed[[1]][,2]
col_types <- sql_parsed[[1]][,3]
col_nulls <- sql_parsed[[1]][,4]
#col_names_fix_acronyms <- fix_acronyms(col_names)
col_names_fixed <- dataplumbr::name.standard_col_names(col_names, fix_acronyms = T, fix_camel = T)
col_types[col_types == "bit"] <- "boolean"
col_types[col_types == "int"] <- "integer"
new_col_defs <- paste(col_names_fixed, col_types, col_nulls, "\n", collapse = ", ")
new_ddl <- paste0("CREATE TABLE ", new_schema, ".", new_table," (", new_col_defs, ")")
cat(new_ddl)
readr::write_lines(new_ddl, paste0("../../Desktop/blkknight/ReferenceScript/", strsplit(sql_file, "\\.")[[1]][1],"_psql.sql"))
name.standard_col_names <- function(name_list = c("first.name", "LastName"), fix_acronyms = TRUE, fix_camel = FALSE) {
o <- name_list
## change acronyms to title case
if (fix_acronyms == TRUE) o <- name.fix_acronyms(o)
## remove camel case
if (fix_camel == TRUE) o <- name.fix_camel_case(o)
## standardize
o <- tolower(o)
o <- gsub("%", "pct", o)
o <- gsub("'", "", o)
o <- gsub("[[:punct:] ]", "_", o)
o <- gsub("_+", "_", o)
o <- gsub("^([0-9]+)", "_\\1", o)
o <- make.unique(o, sep = "_")
o
}
sql_file <- "Create_Table_ASMT.sql"
new_schema <- "blackknight"
new_table <- "asmt_20210621"
sql <- readr::read_lines(paste0("../../Desktop/blkknight/ReferenceScript/", sql_file))
sql_fix <- stringr::str_remove_all(sql, "[\\[\\]]") %>%
stringr::str_replace("Create[:space:]TABLE[:space:].*?\\(", ",") %>%
stringr::str_remove("TABLE[:space:]dbo.*?[:space:]") %>%
stringr::str_remove("^.*ON PRIMARY.*$")
sql_fix_str <- paste(sql_fix, collapse = "")
sql_parsed <- stringr::str_match_all(sql_fix_str, ",(.*?)[:space:]([a-z]+.*?)[:space:](.*?[Nn][Uu][Ll][Ll])")
col_names <- sql_parsed[[1]][,2]
col_types <- sql_parsed[[1]][,3]
col_nulls <- sql_parsed[[1]][,4]
#col_names_fix_acronyms <- fix_acronyms(col_names)
col_names_fixed <- name.standard_col_names(col_names, fix_acronyms = T, fix_camel = T)
col_types[col_types == "bit"] <- "boolean"
col_types[col_types == "int"] <- "integer"
new_col_defs <- paste(col_names_fixed, col_types, col_nulls, "\n", collapse = ", ")
new_ddl <- paste0("CREATE TABLE ", new_schema, ".", new_table," (", new_col_defs, ")")
cat(new_ddl)
readr::write_lines(new_ddl, paste0("../../Desktop/blkknight/ReferenceScript/", strsplit(sql_file, "\\.")[[1]][1],"_psql.sql"))
